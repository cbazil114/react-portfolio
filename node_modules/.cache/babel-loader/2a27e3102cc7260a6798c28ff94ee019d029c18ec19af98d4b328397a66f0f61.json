{"ast":null,"code":"var _jsxFileName = \"/Users/connorbazil/Desktop/Code Repos/react-portfolio/src/components/Contact/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// Here we import a helper function that will check if the email is valid\nimport { checkPassword, validateEmail } from '../../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Contact() {\n  _s();\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const handleInputChange = e => {\n    // Getting the value and name of the input which triggered the change\n    const {\n      target\n    } = e;\n    const inputType = target.name;\n    const inputValue = target.value;\n\n    // Based on the input type, we set the state of either email, username, and password\n    if (inputType === 'email') {\n      if (validateEmail(inputValue)) {\n        setEmail(inputValue);\n        // Check if the email is valid after input is done (using onBlur to trigger once cursor leaves email input box)\n      } else {\n        setErrorMessage('');\n        setErrorMessage('Email is invalid');\n      }\n    } else if (inputType === 'message') {\n      setMessage(inputValue);\n    } else {\n      if (checkPassword(inputValue)) {\n        setErrorMessage(`Choose a more secure password`);\n      } else {\n        setPassword(inputValue);\n      }\n    }\n  };\n  const handleFormSubmit = e => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault();\n\n    // Then we check to see if the password is not valid. If so, we set an error message regarding the password.\n    alert(`Hello`);\n\n    // If everything goes according to plan, we want to clear out the input after a successful registration.\n    setMessage('');\n    setPassword('');\n    setEmail('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Contact Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        defaultValue: email,\n        name: \"email\",\n        onBlur: handleInputChange,\n        type: \"email\",\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        defaultValue: message,\n        name: \"message\",\n        onBlur: handleInputChange,\n        type: \"text\",\n        placeholder: \"Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        defaultValue: password,\n        name: \"password\",\n        onBlur: handleInputChange,\n        type: \"password\",\n        placeholder: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleFormSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(Contact, \"pl2gmz5vF1CvvLXXQ+2bSIROnII=\");\n_c = Contact;\nvar _c;\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"names":["React","useState","checkPassword","validateEmail","jsxDEV","_jsxDEV","Contact","_s","email","setEmail","message","setMessage","password","setPassword","errorMessage","setErrorMessage","handleInputChange","e","target","inputType","name","inputValue","value","handleFormSubmit","preventDefault","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","className","defaultValue","onBlur","type","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/connorbazil/Desktop/Code Repos/react-portfolio/src/components/Contact/index.js"],"sourcesContent":["import React, { useState } from 'react';\n\n// Here we import a helper function that will check if the email is valid\nimport { checkPassword, validateEmail } from '../../utils/helpers';\n\nexport default function Contact() {\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleInputChange = (e) => {\n    // Getting the value and name of the input which triggered the change\n    const { target } = e;\n    const inputType = target.name;\n    const inputValue = target.value;\n\n    // Based on the input type, we set the state of either email, username, and password\n    if (inputType === 'email') {\n      if (validateEmail(inputValue)) {\n        setEmail(inputValue);\n        // Check if the email is valid after input is done (using onBlur to trigger once cursor leaves email input box)\n      } else {\n        setErrorMessage('');\n      setErrorMessage('Email is invalid');\n    }} else if (inputType === 'message') {\n        setMessage(inputValue);\n    } else {\n      if (checkPassword(inputValue)) {\n        setErrorMessage(\n          `Choose a more secure password`\n        );\n      } else {\n      setPassword(inputValue);\n    }\n  }\n  };\n  \n\n  const handleFormSubmit = (e) => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault();\n\n      // Then we check to see if the password is not valid. If so, we set an error message regarding the password.\n    alert(`Hello`);\n\n    // If everything goes according to plan, we want to clear out the input after a successful registration.\n    setMessage('');\n    setPassword('');\n    setEmail('');\n  };\n\n  return (\n    <div>\n      <h2>Contact Form</h2>\n      <form className=\"form\">\n        <input\n          defaultValue={email}\n          name=\"email\"\n          onBlur={handleInputChange}\n          type=\"email\"\n          placeholder=\"Email\"\n        />\n        <input\n          defaultValue={message}\n          name=\"message\"\n          onBlur={handleInputChange}\n          type=\"text\"\n          placeholder=\"Message\"\n        />\n        <input\n          defaultValue={password}\n          name=\"password\"\n          onBlur={handleInputChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <button type=\"button\" onClick={handleFormSubmit}>Submit</button>\n      </form>\n      {errorMessage && (\n        <div>\n          <p className=\"error-text\">{errorMessage}</p>\n        </div>\n      )}\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
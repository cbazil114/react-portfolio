{"ast":null,"code":"import _slicedToArray from\"/Users/connorbazil/Desktop/Code Repos/react-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';// Here we import a helper function that will check if the email is valid\nimport{validateEmail}from'../../utils/helpers';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Contact(){// Create state variables for the fields in the form\n// We are also setting their initial values to an empty string\nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),email=_useState2[0],setEmail=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),message=_useState4[0],setMessage=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),name=_useState6[0],setName=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),errorMessage=_useState8[0],setErrorMessage=_useState8[1];var handleInputChange=function handleInputChange(e){// Getting the value and name of the input which triggered the change\nvar target=e.target;var inputType=target.name;var inputValue=target.value;// Based on the input type, we set the state of either email, username, and password\nif(inputType==='email'){if(e.target.value.length==0){setErrorMessage('Please enter an email address');}else if(validateEmail(inputValue)){setErrorMessage('');setEmail(inputValue);// Check if the email is valid after input is done (using onBlur to trigger once cursor leaves email input box)\n}else{setErrorMessage('Please enter a valid email');}}else if(inputType==='message'){if(e.target.value.length==0){setErrorMessage('Please enter a message');}else{setErrorMessage('');setMessage(inputValue);}}else{if(e.target.value.length==0){setErrorMessage('Please enter a name');}else{setErrorMessage('');setName(inputValue);}}};var handleFormSubmit=function handleFormSubmit(e){// Preventing the default behavior of the form submit (which is to refresh the page)\ne.preventDefault();// Then we check to see if the password is not valid. If so, we set an error message regarding the password.\nalert(\"Hello\");// If everything goes according to plan, we want to clear out the input after a successful registration.\nsetMessage('');setName('');setEmail('');};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Contact Form\"}),/*#__PURE__*/_jsxs(\"form\",{className:\"form\",children:[/*#__PURE__*/_jsx(\"input\",{defaultValue:email,name:\"email\",onBlur:handleInputChange,type:\"email\",placeholder:\"Email\"}),/*#__PURE__*/_jsx(\"input\",{defaultValue:message,name:\"message\",onBlur:handleInputChange,type:\"text\",placeholder:\"Message\"}),/*#__PURE__*/_jsx(\"input\",{defaultValue:name,name:\"name\",onBlur:handleInputChange,type:\"text\",placeholder:\"Name\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:handleFormSubmit,children:\"Submit\"})]}),errorMessage&&/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{className:\"error-text\",children:errorMessage})})]});}","map":{"version":3,"names":["React","useState","validateEmail","jsx","_jsx","jsxs","_jsxs","Contact","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","message","setMessage","_useState5","_useState6","name","setName","_useState7","_useState8","errorMessage","setErrorMessage","handleInputChange","e","target","inputType","inputValue","value","length","handleFormSubmit","preventDefault","alert","children","className","defaultValue","onBlur","type","placeholder","onClick"],"sources":["/Users/connorbazil/Desktop/Code Repos/react-portfolio/src/components/Contact/index.js"],"sourcesContent":["import React, { useState } from 'react';\n\n// Here we import a helper function that will check if the email is valid\nimport { validateEmail } from '../../utils/helpers';\n\nexport default function Contact() {\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [name, setName] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleInputChange = (e) => {\n    // Getting the value and name of the input which triggered the change\n    const { target } = e;\n    const inputType = target.name;\n    const inputValue = target.value;\n\n    // Based on the input type, we set the state of either email, username, and password\n    if (inputType === 'email') {\n      if (e.target.value.length == 0) {\n        setErrorMessage('Please enter an email address');\n      } else if (validateEmail(inputValue)) {\n        setErrorMessage('');\n        setEmail(inputValue);\n        // Check if the email is valid after input is done (using onBlur to trigger once cursor leaves email input box)\n      } else {\n      setErrorMessage('Please enter a valid email');\n    }} else if (inputType === 'message') {\n      if (e.target.value.length == 0) {\n        setErrorMessage('Please enter a message');\n      } else {\n        setErrorMessage('');\n        setMessage(inputValue);\n      }\n    } else {\n      if (e.target.value.length == 0) {\n        setErrorMessage('Please enter a name')\n      } else {\n        setErrorMessage('');\n        setName(inputValue);\n    }\n  }\n  };\n  \n\n  const handleFormSubmit = (e) => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault();\n\n      // Then we check to see if the password is not valid. If so, we set an error message regarding the password.\n    alert(`Hello`);\n\n    // If everything goes according to plan, we want to clear out the input after a successful registration.\n    setMessage('');\n    setName('');\n    setEmail('');\n  };\n\n  return (\n    <div>\n      <h2>Contact Form</h2>\n      <form className=\"form\">\n        <input\n          defaultValue={email}\n          name=\"email\"\n          onBlur={handleInputChange}\n          type=\"email\"\n          placeholder=\"Email\"\n        />\n        <input\n          defaultValue={message}\n          name=\"message\"\n          onBlur={handleInputChange}\n          type=\"text\"\n          placeholder=\"Message\"\n        />\n        <input\n          defaultValue={name}\n          name=\"name\"\n          onBlur={handleInputChange}\n          type=\"text\"\n          placeholder=\"Name\"\n        />\n        <button type=\"button\" onClick={handleFormSubmit}>Submit</button>\n      </form>\n      {errorMessage && (\n        <div>\n          <p className=\"error-text\">{errorMessage}</p>\n        </div>\n      )}\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}